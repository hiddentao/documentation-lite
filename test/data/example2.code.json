{
  "file": {
    "description": [
      "The Waigo module loader."
    ]
  },
  "variables": [
    {
      "name": "loader",
      "tags": {
        "type": [
          {
            "description": null,
            "type": {
              "name": "Object"
            }
          }
        ]
      },
      "description": [
        "Global reference to the loader."
      ],
      "static": {
        "variables": [
          {
            "name": "_",
            "tags": {
              "type": [
                {
                  "description": null,
                  "type": {
                    "name": "Object"
                  }
                }
              ]
            },
            "description": [
              "Reference to Lodash instance."
            ],
            "type": {
              "description": null,
              "type": {
                "name": "Object"
              }
            },
            "code": [
              "loader._ = _;"
            ]
          }
        ],
        "methods": [
          {
            "name": "reset",
            "tags": {},
            "description": [
              "Reset the internal configuration.",
              "Note: `init()` must be called after this to re-initialize the loader."
            ],
            "params": [],
            "returns": [],
            "throws": [],
            "code": [
              "loader.reset = function() {",
              "  debug('Reset loader config');",
              "",
              "  appFolder = null;",
              "  loader[$FILE] = null;",
              "  loader[$SOURCE_PATHS] = null;",
              "};"
            ]
          },
          {
            "name": "init",
            "tags": {
              "param": [
                {
                  "description": "Loading configuration.",
                  "type": {
                    "optional": true,
                    "name": "Object"
                  },
                  "name": "options"
                },
                {
                  "description": "Absolute path to folder containing app files. Overrides the default calculated folder.",
                  "type": {
                    "optional": true,
                    "name": "String"
                  },
                  "name": "options.appFolder"
                },
                {
                  "description": "Plugin loading configuration.",
                  "type": {
                    "optional": true,
                    "name": "Object"
                  },
                  "name": "options.plugins"
                },
                {
                  "description": "Names of plugins to load. If omitted then other options are used to load plugins.",
                  "type": {
                    "optional": true,
                    "name": "Array"
                  },
                  "name": "options.plugins.names"
                },
                {
                  "description": "Regexes specifying plugin naming conventions. Default is `waigo-plugin-*`.",
                  "type": {
                    "optional": true,
                    "name": "Array"
                  },
                  "name": "options.plugins.glob"
                },
                {
                  "description": "JSON config containing names of plugins to load. If a string is given then it assumed to be the path of a script which exports the configuration. Default is to load `package.json`.",
                  "type": {
                    "optional": true
                  },
                  "name": "options.plugins.config"
                },
                {
                  "description": "Names of keys in JSON config whose child keys contain names of plugins. Default is `[dependencies, devDependencies, peerDependencies]`.",
                  "type": {
                    "optional": true,
                    "name": "Array"
                  },
                  "name": "options.plugins.configKey"
                }
              ],
              "return": [
                {
                  "description": "Final augmented options, in case you wish to check the loading config.",
                  "type": {
                    "name": "Object"
                  }
                }
              ]
            },
            "description": [
              "Initialise the loader.",
              "This scans the folder trees of the core framework, plugins and your\napplication to map out what's available and to ensure that there are no\ninstances of any given file or view being provided by two or more \nplugins.",
              "If `options.plugins` is provided then those named plugins get loaded. If\nnot then the remaining options are used to first work out which plugins to\nload and then those plugins get loaded. By default the plugins to load are\nfiltered from the dependencies listed within the `package.json` file."
            ],
            "params": [
              {
                "name": "options",
                "description": [
                  "Loading configuration."
                ],
                "type": {
                  "optional": true,
                  "name": "Object"
                }
              }
            ],
            "returns": [
              {
                "description": [
                  "Final augmented options, in case you wish to check the loading config."
                ],
                "type": {
                  "name": "Object"
                }
              }
            ],
            "throws": [],
            "code": [
              "loader.init = function*(options) {",
              "  if (loader[$FILE]) {",
              "    debug('Waigo was already initialised. Re-initialising...');",
              "",
              "    loader.reset();",
              "  }",
              "",
              "  options = JSON.parse(JSON.stringify(options || {}));",
              "  options.plugins = options.plugins || {};",
              "",
              "  appFolder = options.appFolder || DEFAULT_APP_FOLDER;",
              "  debug('App folder ' + appFolder);",
              "",
              "  // get loadable plugin",
              "  if (!options.plugins.names) {",
              "    debug('Getting plugin names...');",
              "    ",
              "    // based on code from https://github.com/sindresorhus/load-grunt-tasks/blob/master/load-grunt-tasks.js",
              "    let pattern = options.plugins.glob || ['waigo-plugin-*'];",
              "    let config = options.plugins.config || null;",
              "    let scope = options.plugins.configKey || ['dependencies', 'devDependencies', 'peerDependencies'];",
              "    ",
              "    if (null === config || typeof config === 'string') {",
              "      let pathToConfig = config;",
              "",
              "      if (!pathToConfig || 'package.json' === pathToConfig) {",
              "        pathToConfig = findup('package.json', {",
              "          cwd: appFolder",
              "        });",
              "",
              "        if (!pathToConfig) {",
              "          throw new Error(`Unable to find package.json`);",
              "        }",
              "      }",
              "",
              "      try {",
              "        config = loader.__require(path.resolve(pathToConfig));",
              "      } catch (err) {",
              "        throw new Error(`Unable to load config file: ${pathToConfig}`);",
              "      }",
              "    }",
              "",
              "    let names = scope.reduce(function (result, prop) {",
              "      return result.concat(Object.keys(config[prop] || {}));",
              "    }, []);",
              "",
              "    options.plugins.names = _.uniq(globule.match(pattern, names));",
              "  }",
              "  ",
              "  debug(`Plugins to load: ${options.plugins.names.join(', ')}`);",
              "",
              "  // what paths will we search?",
              "  let sourcePaths = loader[$SOURCE_PATHS] = {",
              "    waigo: WAIGO_FOLDER,",
              "    app: appFolder",
              "  };",
              "",
              "  _.each(options.plugins.names, function(name) {",
              "    let fullPath;",
              "",
              "    try {",
              "      fullPath = path.dirname(require.resolve(name));",
              "    } catch (err) {",
              "      if (process.env.PLUGIN_SEARCH_FOLDER) {",
              "        fullPath = path.join(process.env.PLUGIN_SEARCH_FOLDER, name);",
              "",
              "        let stat = fs.statSync(fullPath);",
              "",
              "        if (!stat.isDirectory()) {",
              "          throw err;",
              "        }",
              "      } else {",
              "        throw err;",
              "      }",
              "    }",
              "",
              "    sourcePaths[name] = path.join(fullPath, 'src');",
              "  });",
              "",
              "  let scanOrder = ['waigo'].concat(options.plugins.names, 'app');",
              "",
              "  // reset cache",
              "  loader[$FILE] = {};",
              "",
              "  // start scanning",
              "  for (let sourceName of scanOrder) {",
              "    let moduleMap = {};",
              "",
              "    debug(`Scanning for files in: ${sourceName}`);",
              "",
              "    _.extend(moduleMap, yield _walk(sourcePaths[sourceName], {",
              "        // only want .js files, but not any from frontend/ views/ or cli/data",
              "        matchFiles: /^(?!(frontend|views|cli\\/data)\\/)(.+?\\.js)$/i,",
              "      })",
              "    );",
              "",
              "    _.extend(moduleMap, yield _walk(sourcePaths[sourceName], {",
              "        // only want files from views/ and emails/, but not ones which are prefixed with an underscore",
              "        matchFiles: /^(views|emails)\\/(.*\\/)?(((?!_)[A-Za-z0-9_]+)\\.?\\w+)$/i,",
              "        // may have many view templates with same names but different extensions",
              "        keepExtensions: true,",
              "      })",
              "    );",
              "",
              "    /*jshint -W083 */",
              "    _.each(moduleMap, function(modulePath, moduleName) {",
              "      loader[$FILE] = loader[$FILE] || {};",
              "      loader[$FILE][moduleName] = _.get(loader[$FILE], moduleName, { ",
              "        sources: {} ",
              "      });",
              "      loader[$FILE][moduleName].sources[sourceName] = modulePath;",
              "    });",
              "  }",
              "",
              "  // now go through the list of available modules and ensure that there are no ambiguities",
              "  _.each(loader[$FILE], function(moduleConfig, moduleName) {",
              "    let sourceNames = Object.keys(moduleConfig.sources);",
              "",
              "    // if there is an app implementation then that's the one to use",
              "    if (moduleConfig.sources.app) {",
              "      moduleConfig._load = 'app';",
              "    } ",
              "    // if there is only one source then use that one",
              "    else if (1 === sourceNames.length) {",
              "      moduleConfig._load = sourceNames[0];",
              "    }",
              "    // else",
              "    else {",
              "      // get plugin source names",
              "      let pluginSources = _.filter(sourceNames, function(srcName) {",
              "        return 'waigo' !== srcName;",
              "      });",
              "",
              "      // if more than one plugin then we have a problem",
              "      if (1 < pluginSources.length) {",
              "        throw new Error(`Path \"${moduleName}\" has more than one plugin implementation to choose from: ${pluginSources.join(', ')}`);",
              "      } ",
              "      // else the one available plugin is the source",
              "      else {",
              "        moduleConfig._load = pluginSources[0];",
              "      }",
              "    }",
              "",
              "    debug(`File \"${moduleName}\" will be loaded from source \"${moduleConfig._load}\"`);",
              "  });",
              "",
              "  return options;",
              "};"
            ]
          },
          {
            "name": "load",
            "tags": {
              "param": [
                {
                  "description": "File path (see `getPath()` docs for supported format).",
                  "type": {
                    "name": "string"
                  },
                  "name": "filePath"
                }
              ],
              "return": [
                {
                  "description": "contents of loaded file.",
                  "type": {
                    "name": "Object"
                  }
                }
              ],
              "throws": [
                {
                  "description": "Error if there was an error loading the file."
                }
              ]
            },
            "description": [
              "Load a file."
            ],
            "params": [
              {
                "name": "filePath",
                "description": [
                  "File path (see `getPath()` docs for supported format)."
                ],
                "type": {
                  "name": "string"
                }
              }
            ],
            "returns": [
              {
                "description": [
                  "contents of loaded file."
                ],
                "type": {
                  "name": "Object"
                }
              }
            ],
            "throws": [
              {
                "description": [
                  "Error if there was an error loading the file."
                ],
                "type": {}
              }
            ],
            "code": [
              "loader.load = function(filePath) {",
              "  let resolvedPath = loader.getPath(filePath);",
              "",
              "  debug(`Load ${filePath} -> ${resolvedPath}`);",
              "",
              "  return loader.__require(resolvedPath);",
              "};"
            ]
          },
          {
            "name": "getPath",
            "tags": {
              "param": [
                {
                  "description": "File path in the supported format.",
                  "type": {
                    "name": "String"
                  },
                  "name": "filePath"
                }
              ],
              "return": [
                {
                  "description": "Full path to file.",
                  "type": {
                    "name": "String"
                  }
                }
              ],
              "throws": [
                {
                  "description": "If the file or the requested source could not be found.",
                  "type": {
                    "name": "Error"
                  }
                }
              ]
            },
            "description": [
              "Get full path to a file.",
              "Names to load are specified in the form: `[npm_module_name:]<module_file_path>`",
              "undefined.",
              "For example, when a call to load the `support/errors` module is made Waigo\nchecks the following paths in order until a match is found:",
              null,
              "In the above example, if the caller wishes to explicitly load the version\nprovided by the `waigo-doc` plugin then the parameter should be\n`waigo-doc:support/errors`. If on the other hand they wish to load the\nversion provided the core Waigo framework then `waigo:support/errors`\nshould be used."
            ],
            "params": [
              {
                "name": "filePath",
                "description": [
                  "File path in the supported format."
                ],
                "type": {
                  "name": "String"
                }
              }
            ],
            "returns": [
              {
                "description": [
                  "Full path to file."
                ],
                "type": {
                  "name": "String"
                }
              }
            ],
            "throws": [
              {
                "description": [
                  "If the file or the requested source could not be found."
                ],
                "type": {
                  "name": "Error"
                }
              }
            ],
            "code": [
              "loader.getPath = function(filePath) {",
              "  if (!loader[$FILE]) {",
              "    throw new Error('Please initialise Waigo first');",
              "  }",
              "",
              "  // get source to load from",
              "  let sanitizedFileName = filePath,",
              "    source = null;",
              "",
              "  let sepPos = filePath.indexOf(':')",
              "  if (-1 < sepPos) {",
              "    source = filePath.substr(0, sepPos);",
              "    sanitizedFileName = filePath.substr(sepPos + 1);",
              "  }",
              "",
              "  if (!loader[$FILE][sanitizedFileName]) {",
              "    throw new Error(`File not found: ${sanitizedFileName}`);",
              "  }",
              "",
              "  // if no source then use default",
              "  if (!source) {",
              "    source = loader[$FILE][sanitizedFileName]._load;",
              "  }",
              "",
              "  if (!loader[$FILE][sanitizedFileName].sources[source]) {",
              "    throw new Error(`File source not found: ${source}`);",
              "  }",
              "",
              "  debug(`File \"${filePath}\" points to \"${sanitizedFileName}\" from source \"${source}\"`);",
              "",
              "  return loader[$FILE][sanitizedFileName].sources[source];",
              "};"
            ]
          },
          {
            "name": "getSources",
            "tags": {
              "return": [
                {
                  "description": null,
                  "type": {
                    "name": "Object"
                  }
                }
              ]
            },
            "description": [
              "Get file sources.",
              "This will return key-value pairs, where the key is the name of the source and \nthe value is the path to the `src` folder for that source."
            ],
            "params": [],
            "returns": [
              {
                "description": [],
                "type": {
                  "name": "Object"
                }
              }
            ],
            "throws": [],
            "code": [
              "loader.getSources = function() {",
              "  return loader[$SOURCE_PATHS];",
              "};"
            ]
          },
          {
            "name": "getItemsInFolder",
            "tags": {
              "param": [
                {
                  "description": "Folder to check under, relative to app folder.",
                  "type": {
                    "name": "String"
                  },
                  "name": "folder"
                }
              ],
              "return": [
                {
                  "description": "List of file paths.",
                  "type": {
                    "name": "Array"
                  }
                }
              ],
              "throws": [
                {
                  "description": "Error If the loader hasn't been initialised yet."
                }
              ]
            },
            "description": [
              "Get all files in given folder path.",
              "This will look for all files\nwhich reside under the given folder (and subfolders) and then return their relative paths. \nFiles provided by both plugins and the app itself will also be included.",
              "This is useful in situations where a particular folder holds a number of \nrelated files/folders and you wish to see which ones are available."
            ],
            "params": [
              {
                "name": "folder",
                "description": [
                  "Folder to check under, relative to app folder."
                ],
                "type": {
                  "name": "String"
                }
              }
            ],
            "returns": [
              {
                "description": [
                  "List of file paths."
                ],
                "type": {
                  "name": "Array"
                }
              }
            ],
            "throws": [
              {
                "description": [
                  "Error If the loader hasn't been initialised yet."
                ],
                "type": {}
              }
            ],
            "code": [
              "loader.getItemsInFolder = function(folder) {",
              "  if (!loader[$FILE]) {",
              "    throw new Error('Please initialise Waigo first');",
              "  }",
              "",
              "  var ret = _.chain(loader[$FILE])",
              "    .keys()",
              "    .filter(function(filePath) {",
              "      return (0 === filePath.indexOf(folder));",
              "    })",
              "    .value();",
              "",
              "  return ret;",
              "};"
            ]
          },
          {
            "name": "getWaigoFolder",
            "tags": {
              "return": [
                {
                  "description": null,
                  "type": {
                    "name": "String"
                  }
                }
              ]
            },
            "description": [
              "Get absolute path to folder containing the Waigo framework."
            ],
            "params": [],
            "returns": [
              {
                "description": [],
                "type": {
                  "name": "String"
                }
              }
            ],
            "throws": [],
            "code": [
              "loader.getWaigoFolder = function() {",
              "  return WAIGO_FOLDER;",
              "};"
            ]
          },
          {
            "name": "getAppFolder",
            "tags": {
              "return": [
                {
                  "description": null,
                  "type": {
                    "name": "String"
                  }
                }
              ]
            },
            "description": [
              "Get absolute path to folder containing the application code."
            ],
            "params": [],
            "returns": [
              {
                "description": [],
                "type": {
                  "name": "String"
                }
              }
            ],
            "throws": [],
            "code": [
              "loader.getAppFolder = function() {",
              "  return appFolder;",
              "};"
            ]
          }
        ]
      },
      "type": {
        "description": null,
        "type": {
          "name": "Object"
        }
      },
      "code": [
        "var loader = module.exports = global.waigo = {};"
      ]
    }
  ]
}