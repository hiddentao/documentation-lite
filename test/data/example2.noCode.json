{
  "file": {
    "description": [
      "The Waigo module loader."
    ]
  },
  "variables": [
    {
      "name": "loader",
      "tags": {
        "type": [
          {
            "description": null,
            "type": {
              "name": "Object"
            }
          }
        ]
      },
      "description": [
        "Global reference to the loader."
      ],
      "static": {
        "variables": [
          {
            "name": "_",
            "tags": {
              "type": [
                {
                  "description": null,
                  "type": {
                    "name": "Object"
                  }
                }
              ]
            },
            "description": [
              "Reference to Lodash instance."
            ],
            "type": {
              "description": null,
              "type": {
                "name": "Object"
              }
            }
          }
        ],
        "methods": [
          {
            "name": "reset",
            "tags": {},
            "description": [
              "Reset the internal configuration.",
              "Note: `init()` must be called after this to re-initialize the loader."
            ],
            "params": [],
            "returns": [],
            "throws": []
          },
          {
            "name": "init",
            "tags": {
              "param": [
                {
                  "description": "Loading configuration.",
                  "type": {
                    "optional": true,
                    "name": "Object"
                  },
                  "name": "options"
                },
                {
                  "description": "Absolute path to folder containing app files. Overrides the default calculated folder.",
                  "type": {
                    "optional": true,
                    "name": "String"
                  },
                  "name": "options.appFolder"
                },
                {
                  "description": "Plugin loading configuration.",
                  "type": {
                    "optional": true,
                    "name": "Object"
                  },
                  "name": "options.plugins"
                },
                {
                  "description": "Names of plugins to load. If omitted then other options are used to load plugins.",
                  "type": {
                    "optional": true,
                    "name": "Array"
                  },
                  "name": "options.plugins.names"
                },
                {
                  "description": "Regexes specifying plugin naming conventions. Default is `waigo-plugin-*`.",
                  "type": {
                    "optional": true,
                    "name": "Array"
                  },
                  "name": "options.plugins.glob"
                },
                {
                  "description": "JSON config containing names of plugins to load. If a string is given then it assumed to be the path of a script which exports the configuration. Default is to load `package.json`.",
                  "type": {
                    "optional": true
                  },
                  "name": "options.plugins.config"
                },
                {
                  "description": "Names of keys in JSON config whose child keys contain names of plugins. Default is `[dependencies, devDependencies, peerDependencies]`.",
                  "type": {
                    "optional": true,
                    "name": "Array"
                  },
                  "name": "options.plugins.configKey"
                }
              ],
              "return": [
                {
                  "description": "Final augmented options, in case you wish to check the loading config.",
                  "type": {
                    "name": "Object"
                  }
                }
              ]
            },
            "description": [
              "Initialise the loader.",
              "This scans the folder trees of the core framework, plugins and your\napplication to map out what's available and to ensure that there are no\ninstances of any given file or view being provided by two or more \nplugins.",
              "If `options.plugins` is provided then those named plugins get loaded. If\nnot then the remaining options are used to first work out which plugins to\nload and then those plugins get loaded. By default the plugins to load are\nfiltered from the dependencies listed within the `package.json` file."
            ],
            "params": [
              {
                "name": "options",
                "description": [
                  "Loading configuration."
                ],
                "type": {
                  "optional": true,
                  "name": "Object"
                }
              }
            ],
            "returns": [
              {
                "description": [
                  "Final augmented options, in case you wish to check the loading config."
                ],
                "type": {
                  "name": "Object"
                }
              }
            ],
            "throws": []
          },
          {
            "name": "load",
            "tags": {
              "param": [
                {
                  "description": "File path (see `getPath()` docs for supported format).",
                  "type": {
                    "name": "string"
                  },
                  "name": "filePath"
                }
              ],
              "return": [
                {
                  "description": "contents of loaded file.",
                  "type": {
                    "name": "Object"
                  }
                }
              ],
              "throws": [
                {
                  "description": "Error if there was an error loading the file."
                }
              ]
            },
            "description": [
              "Load a file."
            ],
            "params": [
              {
                "name": "filePath",
                "description": [
                  "File path (see `getPath()` docs for supported format)."
                ],
                "type": {
                  "name": "string"
                }
              }
            ],
            "returns": [
              {
                "description": [
                  "contents of loaded file."
                ],
                "type": {
                  "name": "Object"
                }
              }
            ],
            "throws": [
              {
                "description": [
                  "Error if there was an error loading the file."
                ],
                "type": {}
              }
            ]
          },
          {
            "name": "getPath",
            "tags": {
              "param": [
                {
                  "description": "File path in the supported format.",
                  "type": {
                    "name": "String"
                  },
                  "name": "filePath"
                }
              ],
              "return": [
                {
                  "description": "Full path to file.",
                  "type": {
                    "name": "String"
                  }
                }
              ],
              "throws": [
                {
                  "description": "If the file or the requested source could not be found.",
                  "type": {
                    "name": "Error"
                  }
                }
              ]
            },
            "description": [
              "Get full path to a file.",
              "Names to load are specified in the form: `[npm_module_name:]<module_file_path>`",
              "undefined.",
              "For example, when a call to load the `support/errors` module is made Waigo\nchecks the following paths in order until a match is found:",
              null,
              "In the above example, if the caller wishes to explicitly load the version\nprovided by the `waigo-doc` plugin then the parameter should be\n`waigo-doc:support/errors`. If on the other hand they wish to load the\nversion provided the core Waigo framework then `waigo:support/errors`\nshould be used."
            ],
            "params": [
              {
                "name": "filePath",
                "description": [
                  "File path in the supported format."
                ],
                "type": {
                  "name": "String"
                }
              }
            ],
            "returns": [
              {
                "description": [
                  "Full path to file."
                ],
                "type": {
                  "name": "String"
                }
              }
            ],
            "throws": [
              {
                "description": [
                  "If the file or the requested source could not be found."
                ],
                "type": {
                  "name": "Error"
                }
              }
            ]
          },
          {
            "name": "getSources",
            "tags": {
              "return": [
                {
                  "description": null,
                  "type": {
                    "name": "Object"
                  }
                }
              ]
            },
            "description": [
              "Get file sources.",
              "This will return key-value pairs, where the key is the name of the source and \nthe value is the path to the `src` folder for that source."
            ],
            "params": [],
            "returns": [
              {
                "description": [],
                "type": {
                  "name": "Object"
                }
              }
            ],
            "throws": []
          },
          {
            "name": "getItemsInFolder",
            "tags": {
              "param": [
                {
                  "description": "Folder to check under, relative to app folder.",
                  "type": {
                    "name": "String"
                  },
                  "name": "folder"
                }
              ],
              "return": [
                {
                  "description": "List of file paths.",
                  "type": {
                    "name": "Array"
                  }
                }
              ],
              "throws": [
                {
                  "description": "Error If the loader hasn't been initialised yet."
                }
              ]
            },
            "description": [
              "Get all files in given folder path.",
              "This will look for all files\nwhich reside under the given folder (and subfolders) and then return their relative paths. \nFiles provided by both plugins and the app itself will also be included.",
              "This is useful in situations where a particular folder holds a number of \nrelated files/folders and you wish to see which ones are available."
            ],
            "params": [
              {
                "name": "folder",
                "description": [
                  "Folder to check under, relative to app folder."
                ],
                "type": {
                  "name": "String"
                }
              }
            ],
            "returns": [
              {
                "description": [
                  "List of file paths."
                ],
                "type": {
                  "name": "Array"
                }
              }
            ],
            "throws": [
              {
                "description": [
                  "Error If the loader hasn't been initialised yet."
                ],
                "type": {}
              }
            ]
          },
          {
            "name": "getWaigoFolder",
            "tags": {
              "return": [
                {
                  "description": null,
                  "type": {
                    "name": "String"
                  }
                }
              ]
            },
            "description": [
              "Get absolute path to folder containing the Waigo framework."
            ],
            "params": [],
            "returns": [
              {
                "description": [],
                "type": {
                  "name": "String"
                }
              }
            ],
            "throws": []
          },
          {
            "name": "getAppFolder",
            "tags": {
              "return": [
                {
                  "description": null,
                  "type": {
                    "name": "String"
                  }
                }
              ]
            },
            "description": [
              "Get absolute path to folder containing the application code."
            ],
            "params": [],
            "returns": [
              {
                "description": [],
                "type": {
                  "name": "String"
                }
              }
            ],
            "throws": []
          }
        ]
      },
      "type": {
        "description": null,
        "type": {
          "name": "Object"
        }
      }
    }
  ]
}